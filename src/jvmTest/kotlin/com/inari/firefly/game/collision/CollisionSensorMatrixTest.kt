package com.inari.firefly.game.collision

import com.inari.util.geom.BitMask
import com.inari.util.geom.Direction
import kotlin.test.Test
import kotlin.test.assertEquals

class CollisionSensorMatrixTest {

    @Test
    fun testInit() {
        val bitmask = BitMask(-1, -1, 18, 21)
        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000]\n" +
                    "\n" +
                    "[-1, -1, -1, -1, -1, -1]\n" +
                    "[-1, -1, -1, -1, -1, -1]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[--, --]    [--, --]    [--, --]\n" +
                    "[--, --]                [--, --]\n" +
                    "[--, --]    [--, --]    [--, --]",
            matrix.toString())
    }

    @Test
    fun testFull() {
        val bitmask = BitMask(-1, -1, 18, 21).fill()
        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "010000001000000010\n" +
                    "111111111111111111\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "111111111111111111\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "111111111111111111\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010]\n" +
                    "\n" +
                    "[0, 0, 0, 0, 0, 0]\n" +
                    "[20, 20, 20, 17, 17, 17]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[-16, -19]    [--, -19]    [-16, -19]\n" +
                    "[-16, --]                [-16, --]\n" +
                    "[-16, -16]    [--, -16]    [-16, -16]",
            matrix.toString())
    }

    @Test
    fun testNorthContacts1() {
        val bitmask = BitMask(-1, -1, 18, 21).setRegion(-1, -1, 18, 1 )
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "111111111111111111\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "010000001000000010\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000]\n" +
                    "\n" +
                    "[0, 0, 0, -1, -1, -1]\n" +
                    "[0, 0, 0, -1, -1, -1]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[--, 1]    [--, 1]    [--, 1]\n" +
                    "[--, 8]                [--, 8]\n" +
                    "[--, --]    [--, --]    [--, --]",
            matrix.toString())
    }

    @Test
    fun testNorthContacts2() {
        val bitmask = BitMask(-1, -1, 18, 21).setRegion(-1, -1, 18, 2 )
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "010000001000000010\n" +
                    "111111111111111111\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000]\n" +
                    "\n" +
                    "[0, 0, 0, 0, -1, -1]\n" +
                    "[1, 1, 1, 17, -1, -1]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[-16, 0]    [--, 0]    [-16, 0]\n" +
                    "[--, 7]                [--, 7]\n" +
                    "[--, --]    [--, --]    [--, --]",
            matrix.toString())
    }

    @Test
    fun testNorthContacts3() {
        val bitmask = BitMask(-1, -1, 18, 21).setRegion(-1, -1, 18, 6 )
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "010000001000000010\n" +
                    "111111111111111111\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000]\n" +
                    "\n" +
                    "[0, 0, 0, 0, -1, -1]\n" +
                    "[5, 5, 5, 17, -1, -1]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[-16, -4]    [--, -4]    [-16, -4]\n" +
                    "[--, 3]                [--, 3]\n" +
                    "[--, --]    [--, --]    [--, --]",
            matrix.toString())
    }

    @Test
    fun testNorthContacts4() {
        val bitmask = BitMask(-1, -1, 18, 21).setRegion(-1, -1, 18, 10 )
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "010000001000000010\n" +
                    "111111111111111111\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "111111111111111111\n" +
                    "010000001000000010\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000]\n" +
                    "\n" +
                    "[0, 0, 0, 0, 0, -1]\n" +
                    "[9, 9, 9, 17, 17, -1]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[-16, -8]    [--, -8]    [-16, -8]\n" +
                    "[-16, --]                [-16, --]\n" +
                    "[--, --]    [--, --]    [--, --]",
            matrix.toString())
    }

    @Test
    fun testSouthContacts1() {
        val bitmask = BitMask(-1, -1, 18, 21).setRegion(-1, 19, 18, 1 )
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "111111111111111111]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "010000001000000010]\n" +
                    "\n" +
                    "[20, 20, 20, -1, -1, -1]\n" +
                    "[20, 20, 20, -1, -1, -1]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[--, --]    [--, --]    [--, --]\n" +
                    "[--, 12]                [--, 12]\n" +
                    "[--, 4]    [--, 4]    [--, 4]",
            matrix.toString())
    }

    @Test
    fun testSouthContacts2() {
        val bitmask = BitMask(-1, -1, 18, 21).setRegion(-1, 16, 18, 4 )
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010]\n" +
                    "\n" +
                    "[17, 17, 17, -1, -1, -1]\n" +
                    "[20, 20, 20, -1, -1, -1]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[--, --]    [--, --]    [--, --]\n" +
                    "[--, 9]                [--, 9]\n" +
                    "[--, 1]    [--, 1]    [--, 1]",
            matrix.toString())
    }

    @Test
    fun testSouthContacts3() {
        val bitmask = BitMask(-1, -1, 18, 21).setRegion(-1, 15, 18, 5 )
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "111111111111111111\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010]\n" +
                    "\n" +
                    "[16, 16, 16, -1, -1, 0]\n" +
                    "[20, 20, 20, -1, -1, 17]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[--, --]    [--, --]    [--, --]\n" +
                    "[--, 8]                [--, 8]\n" +
                    "[-16, 0]    [--, 0]    [-16, 0]",
            matrix.toString())
    }

    @Test
    fun testSouthContacts4() {
        val bitmask = BitMask(-1, -1, 18, 21).setRegion(-1, 14, 18, 6 )
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "010000001000000010\n" +
                    "111111111111111111\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010]\n" +
                    "\n" +
                    "[15, 15, 15, -1, -1, 0]\n" +
                    "[20, 20, 20, -1, -1, 17]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[--, --]    [--, --]    [--, --]\n" +
                    "[--, 7]                [--, 7]\n" +
                    "[-16, -1]    [--, -1]    [-16, -1]",
            matrix.toString())
    }

    @Test
    fun testWestContacts1() {
        val bitmask = BitMask(-1, -1, 18, 21).setRegion(-1, -1, 1, 21 )
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000\n" +
                    "100000000000000000]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "000000000000000000\n" +
                    "100000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "100000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "100000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000]\n" +
                    "\n" +
                    "[-1, -1, -1, 0, 0, 0]\n" +
                    "[-1, -1, -1, 0, 0, 0]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[1, --]    [8, --]    [--, --]\n" +
                    "[1, --]                [--, --]\n" +
                    "[1, --]    [8, --]    [--, --]",
            matrix.toString())
    }

    @Test
    fun testWestContacts2() {
        val bitmask = BitMask(-1, -1, 18, 21).setRegion(-1, -1, 2, 21 )
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000\n" +
                    "110000000000000000]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "010000000000000000\n" +
                    "110000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "110000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "110000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000]\n" +
                    "\n" +
                    "[0, -1, -1, 0, 0, 0]\n" +
                    "[20, -1, -1, 1, 1, 1]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[0, -19]    [7, --]    [--, --]\n" +
                    "[0, --]                [--, --]\n" +
                    "[0, -16]    [7, --]    [--, --]",
            matrix.toString())
    }

    @Test
    fun testWestContacts3() {
        val bitmask = BitMask(-1, -1, 18, 21).setRegion(-1, -1, 3, 21 )
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000\n" +
                    "111000000000000000]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "010000000000000000\n" +
                    "111000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "111000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "111000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000]\n" +
                    "\n" +
                    "[0, -1, -1, 0, 0, 0]\n" +
                    "[20, -1, -1, 2, 2, 2]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[-1, -19]    [6, --]    [--, --]\n" +
                    "[-1, --]                [--, --]\n" +
                    "[-1, -16]    [6, --]    [--, --]",
            matrix.toString())
    }

    @Test
    fun testEastContacts1() {
        val bitmask = BitMask(-1, -1, 18, 21).setRegion(16, -1, 1, 21 )
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001\n" +
                    "000000000000000001]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "000000000000000000\n" +
                    "000000000000000001\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000001\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000001\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000\n" +
                    "000000000000000000]\n" +
                    "\n" +
                    "[-1, -1, -1, 17, 17, 17]\n" +
                    "[-1, -1, -1, 17, 17, 17]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[--, --]    [9, --]    [1, --]\n" +
                    "[--, --]                [1, --]\n" +
                    "[--, --]    [9, --]    [1, --]",
            matrix.toString())
    }

    @Test
    fun testEastContacts2() {
        val bitmask = BitMask(-1, -1, 18, 21).setRegion(15, -1, 2, 21 )
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011\n" +
                    "000000000000000011]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "000000000000000010\n" +
                    "000000000000000011\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000011\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000011\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010]\n" +
                    "\n" +
                    "[-1, -1, 0, 16, 16, 16]\n" +
                    "[-1, -1, 20, 17, 17, 17]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[--, --]    [8, --]    [0, -19]\n" +
                    "[--, --]                [0, --]\n" +
                    "[--, --]    [8, --]    [0, -16]",
            matrix.toString())
    }

    @Test
    fun testEastContacts3() {
        val bitmask = BitMask(-1, -1, 18, 21).setRegion(14, -1, 3, 21 )
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111\n" +
                    "000000000000000111]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "000000000000000010\n" +
                    "000000000000000111\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000111\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000111\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010\n" +
                    "000000000000000010]\n" +
                    "\n" +
                    "[-1, -1, 0, 15, 15, 15]\n" +
                    "[-1, -1, 20, 17, 17, 17]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[--, --]    [7, --]    [-1, -19]\n" +
                    "[--, --]                [-1, --]\n" +
                    "[--, --]    [7, --]    [-1, -16]",
            matrix.toString())
    }


    @Test
    fun testSlope1() {
        val bitmask = BitMask(-1, -1, 18, 21).setHalfSlopeRegion(Direction.NORTH_WEST)
        assertEquals(
            "BitMask [region=[x=-1,y=-1,width=18,height=21], bits=\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111111\n" +
                    "111111111111111110\n" +
                    "111111111111111100\n" +
                    "111111111111111000\n" +
                    "111111111111110000\n" +
                    "111111111111100000\n" +
                    "111111111111000000\n" +
                    "111111111110000000\n" +
                    "111111111100000000\n" +
                    "111111111000000000\n" +
                    "111111110000000000\n" +
                    "111111100000000000\n" +
                    "111111000000000000\n" +
                    "111110000000000000\n" +
                    "111100000000000000\n" +
                    "111000000000000000\n" +
                    "110000000000000000\n" +
                    "100000000000000000]",
            bitmask.toString())

        val matrix = CollisionSensorMatrix(16, 16, gapSouth = 4)
        matrix.calc(bitmask)

        assertEquals(
            "BitMask [region=[x=0,y=0,width=18,height=21], bits=\n" +
                    "010000001000000010\n" +
                    "111111111111111111\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000010\n" +
                    "010000001000000000\n" +
                    "010000001000000000\n" +
                    "010000001000000000\n" +
                    "111111111111100000\n" +
                    "010000001000000000\n" +
                    "010000001000000000\n" +
                    "010000001000000000\n" +
                    "010000001000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "111110000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "010000000000000000\n" +
                    "000000000000000000]\n" +
                    "\n" +
                    "[0, 0, 0, 0, 0, 0]\n" +
                    "[19, 12, 4, 17, 12, 4]\n" +
                    "\n" +
                    "contactSensorPointTopLeft:[x=1,y=1]\n" +
                    "contactSensorPointTopMiddle:[x=8,y=1]\n" +
                    "contactSensorPointTopRight:[x=16,y=1]\n" +
                    "\n" +
                    "contactSensorPointCenterLeft:[x=1,y=8]\n" +
                    "contactSensorPointCenterRight:[x=16,y=8]\n" +
                    "\n" +
                    "contactSensorPointBottomLeft:[x=1,y=16]\n" +
                    "contactSensorPointBottomMiddle:[x=8,y=16]\n" +
                    "contactSensorPointBottomRight:[x=16,y=16]\n" +
                    "\n" +
                    "[-16, -18]    [--, -11]    [-16, -3]\n" +
                    "[-11, --]                [--, 4]\n" +
                    "[-3, -16]    [4, --]    [--, --]",
            matrix.toString())
    }
}